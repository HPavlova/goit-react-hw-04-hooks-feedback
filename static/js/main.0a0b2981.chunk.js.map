{"version":3,"sources":["components/Feedback/Section.jsx","components/Feedback/FeedbackOptions.jsx","components/Feedback/Statistics.jsx","components/Feedback/Notification.jsx","components/Feedback/Feedback.jsx","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","Feedback","state","hendleIncrement","event","target","setState","prevState","this","countTotalFeedback","Math","round","countPositiveFeedbackPercentage","Component","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAgBeA,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCSQC,EAbS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBAAQC,KAAK,SAASC,KAAMF,EAAqBG,QAASL,EAA1D,SACGE,GADsCA,OCiB9BI,EAnBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCKSC,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,8BACE,4BAAIA,OCEJC,E,4MACJC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,gBAAkB,SAAAC,GAChB,IAAMb,EAAOa,EAAMC,OAAOd,KAE1B,EAAKe,UAAS,SAAAC,GAAS,sBACpBhB,EAAOgB,EAAUhB,GAAQ,O,wDAI9B,WACE,MAA+BiB,KAAKN,MAEpC,OAFA,EAAQR,KAAR,EAAcC,QAAd,EAAuBC,M,6CAKzB,WACE,IAAMC,EAAQW,KAAKC,qBAEbX,EADOU,KAAKN,MAAMR,KACWG,EAAS,IAC5C,OAAOa,KAAKC,MAAMb,K,oBAGpB,WACE,MAA+BU,KAAKN,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQW,KAAKC,qBACbX,EAAqBU,KAAKI,kCAEhC,OACE,gCACE,cAAC,EAAD,CAAS7B,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBqB,KAAKL,oBAIf,IAAVN,EACC,cAAC,EAAD,CAAcG,QAAQ,sBAEtB,cAAC,EAAD,CAASjB,MAAM,aAAf,SACE,cAAC,EAAD,CACEW,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GAnDXe,aA4DRZ,ICzDAa,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0a0b2981.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: propTypes.string,\n};\n\nexport default Section;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => (\n    <button type=\"button\" name={option} key={option} onClick={onLeaveFeedback}>\n      {option}\n    </button>\n  ));\n};\n\nFeedbackOptions.propTypes = {\n  options: propTypes.array.isRequired,\n  onLeaveFeedback: propTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage} %</p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: propTypes.number.isRequired,\n  neutral: propTypes.number.isRequired,\n  bad: propTypes.number.isRequired,\n  total: propTypes.number.isRequired,\n  positivePercentage: propTypes.number.isRequired,\n};\nexport default Statistics;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return (\n    <div>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nNotification.propTypes = {\n  message: propTypes.string,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport './Feedback.module.css';\n\nimport Section from './Section';\nimport FeedbackOptions from './FeedbackOptions';\nimport Statistics from './Statistics';\nimport Notification from './Notification';\n\nclass Feedback extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  hendleIncrement = event => {\n    const name = event.target.name;\n\n    this.setState(prevState => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  countTotalFeedback() {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    return total;\n  }\n\n  countPositiveFeedbackPercentage() {\n    const total = this.countTotalFeedback();\n    const good = this.state.good;\n    const positivePercentage = (good / total) * 100;\n    return Math.round(positivePercentage);\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={this.hendleIncrement}\n          />\n        </Section>\n\n        {total === 0 ? (\n          <Notification message=\"No feedback given\"></Notification>\n        ) : (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          </Section>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Feedback;\n","import './App.css';\nimport Feedback from './components/Feedback/Feedback';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}