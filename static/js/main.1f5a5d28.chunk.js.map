{"version":3,"sources":["components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","components/Feedback/Feedback.jsx","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","Feedback","useState","setGood","setNeutral","setBad","event","target","prevState","Math","round","countPositiveFeedbackPercentage","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAgBeA,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCSQC,EAbS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBAAQC,KAAK,SAASC,KAAMF,EAAqBG,QAASL,EAA1D,SACGE,GADsCA,OCiB9BI,EAnBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCKSC,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,8BACE,4BAAIA,OCEK,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAON,EAAP,KAAYS,EAAZ,KAuBMR,EAAQH,EAAOC,EAAUC,EAO/B,OACE,gCACE,cAAC,EAAD,CAASb,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAjCgB,SAAAmB,GAGtB,OAFiBA,EAAMC,OAAfhB,MAGN,IAAK,OACHY,GAAQ,SAAAK,GAAS,OAAIA,EAAY,KACjC,MAEF,IAAK,UACHJ,GAAW,SAAAI,GAAS,OAAIA,EAAY,KACpC,MAEF,IAAK,MACHH,GAAO,SAAAG,GAAS,OAAIA,EAAY,KAChC,MAEF,QACE,aAoBS,IAAVX,EACC,cAAC,EAAD,CAAcG,QAAQ,sBAEtB,cAAC,EAAD,CAASjB,MAAM,aAAf,SACE,cAAC,EAAD,CACEW,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAvBV,WACE,IAAMA,EAAsBJ,EAAOG,EAAS,IAC5C,OAAOY,KAAKC,MAAMZ,GAqBUa,UChDjBC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAACZ,EAAD,OCDNa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1f5a5d28.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: propTypes.string,\n};\n\nexport default Section;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => (\n    <button type=\"button\" name={option} key={option} onClick={onLeaveFeedback}>\n      {option}\n    </button>\n  ));\n};\n\nFeedbackOptions.propTypes = {\n  options: propTypes.array.isRequired,\n  onLeaveFeedback: propTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage} %</p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: propTypes.number.isRequired,\n  neutral: propTypes.number.isRequired,\n  bad: propTypes.number.isRequired,\n  total: propTypes.number.isRequired,\n  positivePercentage: propTypes.number.isRequired,\n};\nexport default Statistics;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return (\n    <div>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nNotification.propTypes = {\n  message: propTypes.string,\n};\n\nexport default Notification;\n","import { useState } from 'react';\nimport './Feedback.module.css';\n\nimport Section from '../Section/Section';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\nimport Statistics from '../Statistics/Statistics';\nimport Notification from '../Notification/Notification';\n\nexport default function Feedback() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const hendleIncrement = event => {\n    const { name } = event.target;\n\n    switch (name) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const total = good + neutral + bad;\n\n  function countPositiveFeedbackPercentage() {\n    const positivePercentage = (good / total) * 100;\n    return Math.round(positivePercentage);\n  }\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={hendleIncrement}\n        />\n      </Section>\n\n      {total === 0 ? (\n        <Notification message=\"No feedback given\"></Notification>\n      ) : (\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      )}\n    </div>\n  );\n}\n","import './App.css';\nimport Feedback from './components/Feedback/Feedback';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}